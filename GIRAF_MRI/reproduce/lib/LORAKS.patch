--- LORAKS.m	2015-11-02 23:12:17.000000000 -0500
+++ LORAKS_mod_GO.m	2017-04-10 00:42:02.000000000 -0400
@@ -1,6 +1,8 @@
-function [reconstructedK,zarray,time] = LORAKS(kdata, kMask, P_C, Ph_C, P_G, Ph_G, P_S, Ph_S, lambda_C, lambda_G, lambda_S, r_C, r_G, r_S, cc, gg,ss, tol, max_iter)
+function [reconstructedK,zarray,stats] = LORAKS_mod_GO(kdata, kMask, P_C, Ph_C, P_G, Ph_G, P_S, Ph_S, lambda_C, lambda_G, lambda_S, r_C, r_G, r_S, cc, gg,ss, tol, max_iter, kData0, settings)
 % function [P_C, Ph_C, P_G, Ph_G, P_S, Ph_S, cc, gg, ss, sizeC, sizeG, sizeS] = generate_LORAKS_operators(N1, N2, R)
 % Justin Haldar 2/20/2014
+% **Modified by Greg Ongie 4/10/2017
+% **to output timing, error, and cost computation
 % Inputs: 
 %     P_C, P_G, P_S, Ph_C, Ph_G, Ph_S, cc, gg, ss:
 %         These are all outputs computed using generate_LORAKS_operators.m.  
@@ -99,19 +101,27 @@
 
 z = kdata(:).*kMask(:);
 
+%added vars--GO
+b = z; 
+x0 = kData0;
+stats.time.svd_step = zeros(1,max_iter);
+stats.time.iter = zeros(1,max_iter);
+stats.MSE = zeros(1,max_iter); 
+stats.cost = zeros(1,max_iter);
 %% Main Loop
-clear textprogressbar
-textprogressbar(' ');
-textprogressbar(0);
+%clear textprogressbar
+%textprogressbar(' ');
+%textprogressbar(0);
 zarray = {};
-time = zeros(1,max_iter);
 for i = 1:max_iter
     tic;
     z_cur = z;
     
     if r_S*lambda_S
         SS = P_S(decomplexify(z));
+        tic;
         [Uss,Sss,Vss] = lansvd(SS,r_S);
+        stats.time.svd_time(i) = toc; 
         SSr = complexify(Ph_S(Uss(:,1:r_S)*Sss(1:r_S,1:r_S)*Vss(:,1:r_S)'));
     else
         SSr = 0;
@@ -133,19 +143,35 @@
     
     z = phi_dagger.*(kdata(:)+lambda_S*SSr+lambda_G*GGr+lambda_C*CCr);
     zarray{end+1} = z;
+    
+    
     t = (norm(z_cur-z)/norm(z));
-    if t < tol
-        
-        textprogressbar(' Converged!');
-        break;
+%     if t < tol
+%         
+%         textprogressbar(' Converged!');
+%         break;filter;%
+%     end
+    
+    %textprogressbar(100*i/max_iter);
+    stats.time.iter(i) = toc;
+    
+    %cost/MSE computations
+    x = reshape(z,size(kdata));
+    stats.MSE(i) = (norm(x-x0)/norm(x0))^2;
+    diff = z(:).*kMask(:)-b(:);
+    stats.cost(i) = norm(diff(:)).^2 + lambda_S*norm(diag(Scc(1:r_C,1:r_C))).^2;          
+ 
+    
+    fprintf('Finished iteration %d of %d in %4.1f s (MSE=%2.2e, cost=%2.2e)\n',i,max_iter,stats.time.iter(i),stats.MSE(i),stats.cost(i));
+    if(stats.MSE(i) < settings.exit_tol)
+    fprintf('**Reached exit tolerance: MSE < %2.2e\n',settings.exit_tol);
+        break; 
     end
     
-    textprogressbar(100*i/max_iter);
-    time(i) = toc;
-end
-if t >= tol
-    textprogressbar(' ');
 end
+% if t >= tol
+%     textprogressbar(' ');
+% end
 reconstructedK = reshape(z, size(kdata));
 return;
 
